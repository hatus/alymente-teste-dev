// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model Usuario {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  senha         String
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

  perfil Perfil?

  @@map("usuarios")
}

model Perfil {
  id             Int      @id @default(autoincrement())
  nome           String
  idade          Int
  cpf            String
  rg             String
  data_nasc      DateTime
  sexo           String
  signo          String
  mae            String
  pai            String
  telefone_fixo  String
  celular        String
  cor            String
  tipo_sanguineo String
  peso           Float
  altura         Float
  usuario_id     Int      @unique
  criado_em      DateTime @default(now())
  atualizado_em  DateTime @updatedAt

  usuario   Usuario    @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  enderecos Endereco[]

  @@map("perfis")
}

model Estado {
  id            Int      @id @default(autoincrement())
  sigla         String
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

  cidades Cidade[]

  @@map("estados")
}

model Cidade {
  id            Int      @id @default(autoincrement())
  nome          String
  estado_id     Int
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

  estado    Estado     @relation(fields: [estado_id], references: [id])
  enderecos Endereco[]

  // nome de cidade e estado são únicos
  // para o caso de existir mais de um estado com nomes de cidades iguais
  @@unique([nome, estado_id])
  @@map("cidades")
}

model Endereco {
  id            Int      @id @default(autoincrement())
  logradouro    String
  numero        Int
  cep           String
  bairro        String
  cidade_id     Int
  perfil_id     Int
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

  cidade Cidade @relation(fields: [cidade_id], references: [id])
  perfil Perfil @relation(fields: [perfil_id], references: [id], onDelete: Cascade)

  @@map("enderecos")
}
